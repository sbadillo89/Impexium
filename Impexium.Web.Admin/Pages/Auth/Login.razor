@page "/login"
@inject NavigationManager NavigationManager
@inject IJSRuntime jsr
@inject IAuthRepository authRepository

<div class="container">
    <div class="d-flex align-items-center justify-content-center h-100 mt-lg-4">
        <div class="card-wrapper">
            <div class="brand d-flex justify-content-md-center align-items-center p-2">
                <img src="https://media-exp1.licdn.com/dms/image/C4D0BAQEeFQy3ED1oww/company-logo_200_200/0/1522933760072?e=2159024400&v=beta&t=QNZp_sjdoP01is4ZDivydWg420qrzMsZv7sXxTX7HI4"
                     alt="logo"
                     style="width:100px; height:100px;"
                     class="my-4">

            </div>
            <div class="card fat">
                <div class="card-body">
                    <h2 class="card-title text-danger text-center flex-grow-1">Welcome</h2>
                    <div>
                        <EditForm Model="auth" OnValidSubmit="OnValidSubmit" style="max-width:500px;">

                            <DataAnnotationsValidator />

                            <div class="form-group">
                                <label for="userName">Username</label>
                                <InputText class="form-control" type="text" name="userName" @bind-Value="auth.User" autofocus></InputText>
                                <ValidationMessage For="@(()=> auth.User)" />
                            </div>
                            <div class="form-group">
                                <label for="password">  Password  </label>
                                <InputText type="password" class="form-control" @bind-Value="auth.Password" data-eye></InputText>
                                <ValidationMessage For="@(()=> auth.Password)" />
                            </div>
                            <div class="form-group m-0">
                                <button type="submit" class="btn btn-danger btn-block" disabled="@isDisabled">
                                    Login
                                </button>
                            </div>

                        </EditForm>

                    </div>
                </div>
            </div>


            @if (!string.IsNullOrEmpty(Message))
            {
                <div class="@(isError ? "alert alert-danger" : "alert alert-success") w-100 mt-2">
                    @Message
                </div>
            }

        </div>
    </div>
</div>



@code {

    AuthRequest auth = new Proxy.Services.AuthRequest();

    private bool isDisabled = false;
    private bool isError=false;
    private string Message = string.Empty;

    private async Task OnValidSubmit()
    {

        isDisabled = true;

        var response = await authRepository.Login(auth);
        isError = (response.Status == System.Net.HttpStatusCode.BadRequest);
        isDisabled = false;
        Message = response.Message;
 
        if (!isError)
        {
            DateTime expireAt = response.ExpireDate;
            await jsr.InvokeVoidAsync("localStorage.setItem", "token-impexium", $"{response.UserName};{response.Token};{expireAt}").ConfigureAwait(false);
            NavigationManager.NavigateTo("/", true);
        }
    }


}
